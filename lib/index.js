// Generated by CoffeeScript 1.9.3
(function() {
  var CrowdBackend, CrowdClient, Q, ldapjs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  ldapjs = require('ldapjs');

  CrowdClient = require('atlassian-crowd-client');

  CrowdBackend = (function() {
    function CrowdBackend(params1) {
      this.params = params1;
      this.search = bind(this.search, this);
      this.bind = bind(this.bind, this);
      this.authorizeThen = bind(this.authorizeThen, this);
      this.authorize = bind(this.authorize, this);
      this.createSearchEntry = bind(this.createSearchEntry, this);
      this.crowd = new CrowdClient({
        baseUrl: this.params.crowd.url,
        application: {
          name: this.params.crowd.applicationName,
          password: this.params.crowd.applicationPassword
        }
      });
      this.bindDn = ldapjs.parseDN(this.params.ldap.bindDn + ',' + this.params.ldap.dnSuffix);
      this.searchBase = ldapjs.parseDN(this.params.ldap.searchBase + ',' + this.params.ldap.dnSuffix);
    }

    CrowdBackend.prototype.createSearchEntry = function(user) {
      var attributes;
      attributes = Object.create(null);
      attributes[this.params.ldap.uid] = user.name;
      attributes.givenName = user.firstname;
      attributes.sn = user.lastname;
      attributes.displayName = user.displayname;
      attributes.mail = user.email;
      return {
        dn: this.params.ldap.uid + '=' + user.name + ',' + this.searchBase,
        attributes: attributes
      };
    };

    CrowdBackend.prototype.authorize = function(req, red, next) {
      if (!req.connection.ldap.bindDN.equals(this.bindDn)) {
        return next(new ldapjs.InsufficientAccessRightsError);
      }
      return next();
    };

    CrowdBackend.prototype.authorizeThen = function(next) {
      return [this.authorize, next];
    };

    CrowdBackend.prototype.bind = function() {
      return (function(_this) {
        return function(req, res, next) {
          if (req.dn.equals(_this.bindDn)) {
            if (req.credentials !== _this.params.ldap.bindPassword) {
              return next(new ldapjs.InvalidCredentialsError());
            }
          } else if (req.dn.childOf(_this.searchBase)) {

          } else {
            return next(new ldapjs.InvalidCredentialsError());
          }
          res.end();
          return next();
        };
      })(this);
    };

    CrowdBackend.prototype.search = function() {
      return this.authorizeThen((function(_this) {
        return function(req, res, next) {
          var deferred, promised;
          promised = false;
          deferred = Q.defer();
          deferred.promise.then(function() {
            res.end();
            return next();
          }).done();
          if (req.dn.equals(_this.searchBase)) {
            if (req.filter instanceof ldapjs.EqualityFilter) {
              if (req.filter.attribute === _this.params.ldap.uid) {
                promised = true;
                Q(_this.crowd.user.get(req.filter.value)).then(function(user) {
                  if (user.active) {
                    res.send(_this.createSearchEntry(user));
                  }
                  return deferred.resolve();
                })["catch"](function(error) {
                  return deferred.resolve();
                }).done();
              }
            }
          } else if (req.dn.childOf(_this.searchBase)) {
            promised = true;
            deferred.resolve();
          } else {
            return next(new ldapjs.NoSuchObjectError());
          }
          if (!promised) {
            return deferred.resolve();
          }
        };
      })(this));
    };

    return CrowdBackend;

  })();

  module.exports.createBackend = function(params) {
    return new CrowdBackend(params);
  };

}).call(this);
